<?xml version="1.0" encoding="ISO-8859-1"?>
<faqs title="Frequently Asked Questions">
  <part id="general">
    <title>General</title>

    <faq id="start">
      <question>How did the GeoAPI project get started, whats its history?</question>
      <answer>
        <p>You can follow the early, pre-history of GeoAPI by reading the following three posts to the
        DigitalEarth.org website; at this point it had no name, only a goal of bringing together multiple
        Java GIS projects.</p>

        <ul>
          <li><a href="http://digitalearth.org/story/2002/10/10/55046/206">Call for a Geo-Spatial API</a></li>
          <li><a href="http://digitalearth.org/story/2002/12/2/195021/503">Java GeoSpatial API Part II</a></li>
          <li><a href="http://digitalearth.org/story/2002/12/12/121814/73">Java GeoSpatial API Part III</a></li>
        </ul>

        <p>As you can see in part III the OGC had just anounced a Geographic Objects initiative, collaboration
        with which ultimatly led to the GeoAPI working group within the OGC and the formation of an addopted
        charter.</p>
      </answer>
    </faq>

    <faq id="OGC">
      <question>What is the relationship between GeoAPI and OGC?</question>
      <answer>
        <p>GeoAPI was initially an initiative of various open source communities wanting to reduce work duplication.
        The goal was to make it easier to exchange pieces of software between independent projects, so that a
        project doesn't need to reinvent a wheel already provided by an other project. In 2004, GeoAPI merged with
        the GO-1 initiative from OGC. In September 2004, the creation of a GeoAPI working group as been approved by
        OGC voting members. In May 2005, the GO-1 final specification, which includes GeoAPI interfaces, has been
        accepted as an OGC standard by electronic vote.</p>
      </answer>
    </faq>

    <faq id="Why">
      <question>Why a standardized set of programming interfaces? Shouldn't OGC standards stick to web services only?</question>
      <answer>
        <p>We believe that both approaches are complementary. Web services are efficient ways to publish geographic
        information using existing software. But some users need to build their own solution, for example as a
        wrapper on top of their own numerical model. Many existing software packages provide sophisticated developer
        toolkits, but each toolkit has its own learning curve, and one can not easily switch from one toolkit to
        another or mix components from different toolkits. Using standardized interfaces, a significant part of the
        API can stay constant across different toolkits, thus reducing both the learning curve (especially since the
        interfaces are derived from published abstract UML) and the interoperability pain points.</p>

        <p>The situation is quite similar to JDBC (Java DataBase Connectivity)'s one. The fact that a high-level language
        already exists for database queries (SQL) doesn't means that low-level programming interfaces are not needed.
        JDBC interfaces have been created as a developer tools in complement to SQL, and they proven to be quite useful.</p>
      </answer>
    </faq>

    <faq id="forcing">
      <question>With standardization of interfaces, aren't you forcing a particular implementation?</question>
      <answer>
        <p>We try to carefully avoid implementation-specific API. Again, JDBC is a good example of what we try to achieve.
        JDBC is an example of successful interfaces-only specification implemented by many vendors. Four categories of
        JDBC drivers exists (pure Java, wrappers around native code, etc.). Implementations exist for (in alphabetical
        order) Access, Derby, HSQL, MySQL, Oracle, PostgreSQL and many others.</p>

        <p>It is important to stress out that GeoAPI is all about interfaces. Concrete classes must implement all methods
        declared in their interfaces, but those interfaces don't put any constraint on the class hierarchy. For example
        GeoAPI provides a <code>MathTransform2D</code> interface which extends <code>MathTransform</code>. In no way do
        implementation classes need to follow the same hierarchy. Actually, in the particular case of <code>MathTransforms</code>,
        they usually don't! A class implementing <code>MathTransform2D</code> doesn't need to extend a class implementing
        <code>MathTransform</code>. The only constraint is to implement all methods declared in the <code>MathTransform2D</code>
        interface and its parent interfaces.</p>
      </answer>
    </faq>
  </part>

  <part id="technical">
    <title>Technical</title>

    <faq id="scripts">
      <question>Why don't you translate all OGC's UML into Java interfaces using some automatic script?</question>
      <answer>
        <p>We tried that path at the beginning of GeoAPI project, and abandoned it. Automatic scripts provide
        useful starting points, but a lot of human intervention is still essential. The relationship between
        UML and Java interfaces is not always straightforward.</p>

        <p><b>Example 1:</b><br/>
        In the Coordinate Reference System (CRS) framework, a <code>GeocentricCRS</code> interface is defined.
        The ISO 19111's UML defines two associations for this class: <code>usesCartesianCS</code> and
        <code>usesSphericalCS</code>. In addition, this class inherits the <code>usesCS</code> association from
        its parent <code>SingleCRS</code> class. Translating this UML blindly into Java interfaces leads to three
        getter methods: <code>getCartesianCS()</code>, <code>getSphericalCS()</code> and <code>getCS()</code>.
        Now, lets look at the intend of those associations. The documentation said that one and only one of
        <code>usesCartesianCS</code> and <code>usesSphericalCS</code> can be defined for a given <code>GeocentricCRS</code>.
        In others words, we still have conseptually only one association (<code>usesCS</code>), but the type is constrained
        to <code>CartesianCS</code> or <code>SphericalCS</code>. In Java language, we feel preferable to keep only
        the <code>getCS()</code> method inherited from <code>SingleCRS</code>, and enforce the constraints at
        <code>GeocentricCRS</code> creation time (i.e. in <code>CRSFactory</code>). In addition, we follow the
        Java usage of avoiding abbreviations and renamed <code>getCS()</code> as <code>getCoordinateSystem()</code>.
        Of course, the constraints must be explained in <code>GeocentricCRS</code>'s javadoc, which involve one more
        hand editing.</p>

        <p><b>Example 2:</b><br/>
        The XML schema defines two attributes (among other) in Layer: <code>CRS</code> and <code>BoundingBox</code>.
        Those two attributes can have an arbitrary amount of elements. From an automatic tool's point of view, they look
        like independent attributes and can be translated into <code>getCRSs()</code> and <code>getBoundingBoxes()</code>
        methods, each of them returning a List. However, reading the documentation, one can realize that those two methods
        form together a <code>Map</code> of <code>CoordinateReferenceSystem</code> keys with <code>Envelope</code> values.
        Whatever we should replace the two above-cited methods by a single one returning a <code>Map</code> is subject to
        debate. But it is reasonable to expect <code>getCRSs()</code> to returns a <code>Set</code> and
        <code>getBoundingBoxes()</code> to returns a <code>Collection</code>, so that implementations backed by a
        <code>Map</code> can associate them to <code>Map.keySet()</code> and <code>Map.values()</code> methods respectively.</p>
      </answer>
    </faq>

    <faq id="collections">
      <question>Why do you favor Collections over arrays as return type?</question>
      <answer>
        <p>For performance, more orthogonal API and more freedom on the implementer side.</p>

        <p><b>Performance (including memory usage)</b><br/>
        Some robust implementations will want to protect their internal state against uncontrolled changes.
        In such implementations, getter methods need to make defensive copies of their mutable attributes (see
        <a href="http://java.sun.com/docs/books/effective/chapters.html">Effective Java</a>, chapter 6, item 24).
        Arrays are mutable objects; nothing prevent an user from writing <code>PointArray.positions()[1000] = null</code>,
        and thus altering the <code>PointArray</code> state if <code>positions()</code> was returning a direct reference
        to its internal array. The box below compares two ways to protect an implementation from changes. Note that in both
        case, the internal data are stored as an array but the getter return type differ.</p>

        <table>
          <tr>
            <th>Array return type</th>
            <th>Collection return type</th>
          </tr>
<tr><td><source>public class PointArray {
    private Position[] p = ...;

    public Position[] positions() {
        return (Position[]) p.clone();
    }
}</source></td>
<td><source>public class PointArray {
    private Position[] p = ...;

    private List&lt;Position&gt; pl = Collections.unmodifiableList(Arrays.asList(p));

    public List&lt;Position&gt; positions() {
        return pl;
    }
}</source></td></tr>
</table>

        <p>Since the collection is read-only in the above example, it doesn’t need to be cloned (note: the <em>elements</em>
        in an array or collection may still mutable, but this is a separated topic). The collection in this example is a
        <strong>view</strong> over the array elements. This view doesn't copy the array, and any change in the array is
        reflected in the view. This is different from <code>Collection.toArray()</code>, which always copy all elements
        in an array. The conversion from collection to array using <code>Collection.toArray()</code> is usually more expensive
        and consume more memory than the conversion from array to collection using <code>Arrays.asList(Object[])</code>. One
        may argue that iteration over a collection is slower than iteration over an array. This slight advantage is compromised
        (in regard of <code>array.clone()</code> cost) if the user doesn't want to iterate over the whole array. Furthermore,
        if an array is really wanted, some <code>Collection.toArray()</code> implementations map directly to
        <code>array.clone()</code>.</p>

        <p>In addition of the above, collections allow on-the-fly object creation. For example positions may be stored
        as a suite of (<var>x</var>,<var>y</var>) coordinates in a single <code>double[]</code> array for efficiency,
        and temporary position objects created on the fly:</p>

<source>public class PointArray {
    private double[] coordinates = ...;

    private List&lt;Position&gt; pl = new AbstractList&lt;Position&gt;() {
        public int size() {
            return coordinates.length / 2;
        }

        public Position get(int i) {
            return new Position2D(coordinates[i*2], coordinates[i*2+1]);
        }
    };

    public List&lt;Position&gt; positions() {
        return pl;
    }
}</source>

        <p>More sophisticated implementations may load or write their data directly to a database on a <em>per-element</em>
        basis. In comparison, arrays require initialization of all array's element before the array is returned. It still
        possible to initialize an array with elements that use deferred execution, but implementers have one less degree
        of freedom with arrays compared to collections.</p>

        <p><b>More orthogonal API</b><br/>
        If a geometry is mutable (at implementer choice), an user may whish to add, edit or remove elements. With arrays
        as return types, we would need to add some <code>add(...)</code> and <code>remove(...)</code> methods in most
        interfaces. Using collections, such API weight is not needed since the user can write the following idiom:</p>

        <source>pointArray.positions().add(someNewPosition);</source>

        <p>The <code>PointArray</code> behavior in such case is left to implementers. It may throw an
        <code>UnsupportedOperationException</code>, keep the point in memory, stores its coordinates immediately in a
        database, <cite>etc.</cite></p>

        <p>In addition of keeping the API lighter, collections as return types also give us for free many additional
        methods like <code>contains(...)</code>, <code>addAll(...)</code>, <code>removeAll(...)</code>, <cite>etc.</cite>
        Adding those kind of methods directly into the geometry interfaces would basically transforms geometries into
        new kind of collections and duplicates the collection framework work without its "well accepted standard"
        characteristic.</p>

        <p><b>More freedom on implementer side</b><br/>
        <ul>
          <li>In the Java language, collections are more abstract than arrays. A collection can be a view over an
          array (<code>using Arrays.asList(...)</code> for example). The converse is impossible in the general case
          (<code>Collection.toArray()</code> doesn’t create a view; it usually copies the array).</li>

          <li>Collections are more abstract than arrays in .NET too: an array is a collection, but a collection
          is not always an array (conversions from an arbitrary collection to an array may require a copy, like
          in Java). The array type is more restrictive than the collection type.</li>

          <li>A collection can be read-only or not, at implementer choice. Java arrays are always mutable and
          need defensive copies (not to be confused with defensive copies of array or collection elements, which
          is yet an other topic).</li>

          <li>Collections allow one more degree of freedom for deferred execution or lazy data loading. Object
          creations can occur on a per-element basis in collection getter methods. In an array, the reference to
          all elements must be initialized before the array is returned.</li>
        </ul>
        </p>
      </answer>
    </faq>

<!-- Empty FAQ for easy copy-and-paste
    <faq id="">
      <question></question>
      <answer>
        <p></p>
      </answer>
    </faq>
-->
  </part>
</faqs>
